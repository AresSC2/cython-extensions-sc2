name: Build Wheels

on:
  workflow_call:
    inputs:
      tag:
        required: true
        type: string

jobs:
  build_sdist:
    name: "sdist"
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.tag }}
          fetch-depth: 0

      - name: Set up python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install poetry
        run: pipx install poetry==1.8.4

      - name: Build sdist
        run: |
          poetry build --format=sdist
      - name: List dist contents (Unix)
        if: runner.os != 'Windows'
        run: if [ -d dist ]; then ls -lh dist/; else echo "dist/ does not exist"; fi
      - name: List dist contents (Windows)
        if: runner.os == 'Windows'
        run: Get-ChildItem dist
        shell: pwsh
      - name: Sanitize artifact name
        id: sanitize
        run: |
          echo "ARTIFACT_NAME=sdist-${{ matrix.os }}" | sed 's/\*//g' >> $GITHUB_ENV
        shell: bash
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: dist/*.tar.gz

  build_wheels_windows:
    name: "${{ matrix.os }} ${{ matrix.cibw_archs }} ${{ matrix.cibw_build }}"
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest]
        python-version: ['3.11', '3.12', '3.13']
#        cibw_build: ["cp310-*", "cp311-*", "cp312-*", "cp313-*"]
#        cibw_archs: ["AMD64", "x86", "ARM64"]

    steps:
        # install poetry
        - name: Check out repository
          uses: actions/checkout@v4
          with:
            ref: ${{ inputs.tag }}
            fetch-depth: 0
        - name: Setup Python ${{ matrix.python-version }}
          uses: actions/setup-python@v5
          with:
            python-version: ${{ matrix.python-version }}
        - name: Install poetry
          run: pipx install poetry
        - name: Install requirements and build extension
          run: |
            poetry install --with dev

        # build a wheel while we are here for later (pipi) and upload artifact
        - name: Make wheel
          run: poetry build
        - name: List dist contents (Unix)
          if: runner.os != 'Windows'
          run: if [ -d dist ]; then ls -lh dist/; else echo "dist/ does not exist"; fi
        - name: List dist contents (Windows)
          if: runner.os == 'Windows'
          run: Get-ChildItem dist
          shell: pwsh
        - name: Sanitize artifact name
          id: sanitize
          run: |
            echo "ARTIFACT_NAME=wheels-windows-${{ matrix.os }}-${{ matrix.cibw_archs }}-${{ matrix.python-version }}-${{ matrix.cibw_build }}" | sed 's/\*//g' >> $GITHUB_ENV
          shell: bash
        - name: Upload wheels
          uses: actions/upload-artifact@v4
          with:
            name: ${{ env.ARTIFACT_NAME }}
            path: dist/*.whl
#      - name: "Set environment variables (Windows)"
#        shell: pwsh
#        run: |
#          (Get-ItemProperty "HKLM:System\CurrentControlSet\Control\FileSystem").LongPathsEnabled
#
#      - name: Check out repository
#        uses: actions/checkout@v4
#        with:
#          fetch-depth: 0
#
#      - name: Set up python 3.12
#        uses: actions/setup-python@v5
#        with:
#          python-version: "3.12"
#
#      - name: Install poetry
#        uses: snok/install-poetry@v1
#        with:
#          virtualenvs-create: false
#          virtualenvs-in-project: false
#          installer-parallel: false # Currently there seems to be some race-condition in windows
#
#      - name: Build wheels
#        uses: pypa/cibuildwheel@v2.16.5
#
#      - uses: actions/upload-artifact@v4
#        with:
#          name: cibw-wheels-${{ matrix.os }}-${{ matrix.cibw_archs }}-${{ strategy.job-index }}
#          path: wheelhouse/*.whl

  build_wheels_linux:
    name: "${{ matrix.os }} ${{ matrix.cibw_archs }} ${{ matrix.cibw_build }}"
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        cibw_build: ["cp311-*", "cp312-*", "cp313-*"]
        cibw_archs: ["x86_64", "i686"] # "aarch64" and "ppc64le" not working, investigate if needed

    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.tag }}
          fetch-depth: 0

      - name: Set up QEMU
        if: matrix.cibw_archs != 'x86_64'
        uses: docker/setup-qemu-action@v2
        with:
          platforms: all

      - name: Set up python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install poetry
        run: pipx install poetry

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.23.2
        env:
          CIBW_ARCHS: ${{ matrix.cibw_archs }}
          CIBW_BUILD: ${{ matrix.cibw_build }}
      - name: List dist contents (Unix)
        if: runner.os != 'Windows'
        run: if [ -d dist ]; then ls -lh dist/; else echo "dist/ does not exist"; fi
      - name: List dist contents (Windows)
        if: runner.os == 'Windows'
        run: Get-ChildItem dist
        shell: pwsh
      - name: Sanitize artifact name
        id: sanitize
        run: |
          echo "ARTIFACT_NAME=wheels-linux-${{ matrix.os }}-${{ matrix.cibw_archs }}-${{ matrix.cibw_build }}" | sed 's/\*//g' >> $GITHUB_ENV
        shell: bash
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: wheelhouse/*.whl

  build_wheels_macos:
    name: "${{ matrix.os }} ${{ matrix.cibw_archs }} ${{ matrix.cibw_build }}"
    runs-on: macos-13
    strategy:
      fail-fast: false
      matrix:
        os: [macos-13]
        cibw_build: ["cp310-*", "cp311-*", "cp312-*"]
        cibw_archs: ["x86_64"]
    env:
      SYSTEM_VERSION_COMPAT: 0
      CIBW_ARCHS_MACOS: ${{ matrix.cibw_archs }}
      CIBW_ENVIRONMENT_MACOS: "ARCHFLAGS='-arch x86_64' _PYTHON_HOST_PLATFORM=macosx-10.9-x86_64 _PYTHON_SYSCONFIGDATA_NAME=_sysconfigdata__darwin_darwin"
      CIBW_BEFORE_ALL: "export SYSTEM_VERSION_COMPAT=0"
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.tag }}
          fetch-depth: 0

      - name: Set up python 3.12 (x86_64)
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          architecture: "x64"

      - name: Install poetry
        run: pipx install poetry

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.23.2
        env:
          CIBW_ARCHS: ${{ matrix.cibw_archs }}
          CIBW_BUILD: ${{ matrix.cibw_build }}
          SYSTEM_VERSION_COMPAT: 0
          CIBW_ENVIRONMENT_MACOS: "ARCHFLAGS='-arch x86_64' _PYTHON_HOST_PLATFORM=macosx-10.9-x86_64 _PYTHON_SYSCONFIGDATA_NAME=_sysconfigdata__darwin_darwin"
          CIBW_BEFORE_ALL: "export SYSTEM_VERSION_COMPAT=0"
      - name: List dist contents (Unix)
        if: runner.os != 'Windows'
        run: if [ -d dist ]; then ls -lh dist/; else echo "dist/ does not exist"; fi
      - name: List dist contents (Windows)
        if: runner.os == 'Windows'
        run: Get-ChildItem dist
        shell: pwsh
      - name: Sanitize artifact name
        id: sanitize
        run: |
          echo "ARTIFACT_NAME=wheels-macos-${{ matrix.os }}-${{ matrix.cibw_archs }}-${{ matrix.cibw_build }}" | sed 's/\*//g' >> $GITHUB_ENV
        shell: bash
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: wheelhouse/*.whl

  build_wheels_macos_arm64:
    name: "${{ matrix.os }} ${{ matrix.cibw_archs }} ${{ matrix.cibw_build }}"
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest]
        cibw_build: ["cp310-*", "cp311-*", "cp312-*"]
        cibw_archs: ["arm64"]

    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.tag }}
          fetch-depth: 0

      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install poetry
        run: pipx install poetry

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.16.5
        env:
          CIBW_BUILD: ${{ matrix.cibw_build }}
          CIBW_ARCHS: ${{ matrix.cibw_archs }}
          CIBW_TEST_SKIP: "*-macosx_arm64"
      - name: List dist contents (Unix)
        if: runner.os != 'Windows'
        run: if [ -d dist ]; then ls -lh dist/; else echo "dist/ does not exist"; fi
      - name: List dist contents (Windows)
        if: runner.os == 'Windows'
        run: Get-ChildItem dist
        shell: pwsh
      - name: Sanitize artifact name
        id: sanitize
        run: |
          echo "ARTIFACT_NAME=wheels-macos-${{ matrix.os }}-${{ matrix.cibw_archs }}-${{ matrix.cibw_build }}" | sed 's/\*//g' >> $GITHUB_ENV
        shell: bash
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ./wheelhouse/*.whl
