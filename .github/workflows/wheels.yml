name: Build Wheels

on:
  workflow_call:

jobs:
  build_sdist:
    name: "sdist"
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install poetry
        run: pipx install poetry==1.8.4

      - name: Build sdist
        run: |
          poetry self add "poetry-dynamic-versioning[plugin]"
          poetry build --format=sdist

      - uses: actions/upload-artifact@v4
        with:
          path: dist/*.tar.gz

  build_wheels_windows:
    name: "${{ matrix.os }} ${{ matrix.cibw_archs }} ${{ matrix.cibw_build }}"
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest]
        python-version: ['3.10', '3.11', '3.12']
#        cibw_build: ["cp310-*", "cp311-*", "cp312-*"]
#        cibw_archs: ["AMD64", "x86", "ARM64"]

    steps:
        # install poetry
        - name: Check out repository
          uses: actions/checkout@v4
          with:
            fetch-depth: 0
        - name: Setup Python ${{ matrix.python-version }}
          uses: actions/setup-python@v5
          with:
            python-version: ${{ matrix.python-version }}
        - name: Install poetry
          run: pipx install poetry
        - name: Install requirements and build extension
          run: |
            poetry install --with dev

        # build a wheel while we are here for later (pipi) and upload artifact
        - name: Make wheel
          run: poetry build
        - name: Upload wheels
          uses: actions/upload-artifact@v4
          with:
            name: cibw-wheels-${{ matrix.os }}-${{ matrix.python-version }}
            path: dist/*.whl
#      - name: "Set environment variables (Windows)"
#        shell: pwsh
#        run: |
#          (Get-ItemProperty "HKLM:System\CurrentControlSet\Control\FileSystem").LongPathsEnabled
#
#      - name: Check out repository
#        uses: actions/checkout@v4
#        with:
#          fetch-depth: 0
#
#      - name: Set up python 3.12
#        uses: actions/setup-python@v5
#        with:
#          python-version: "3.12"
#
#      - name: Install poetry
#        uses: snok/install-poetry@v1
#        with:
#          virtualenvs-create: false
#          virtualenvs-in-project: false
#          installer-parallel: false # Currently there seems to be some race-condition in windows
#
#      - name: Build wheels
#        uses: pypa/cibuildwheel@v2.16.5
#
#      - uses: actions/upload-artifact@v4
#        with:
#          name: cibw-wheels-${{ matrix.os }}-${{ matrix.cibw_archs }}-${{ strategy.job-index }}
#          path: wheelhouse/*.whl

  build_wheels_linux:
    name: "${{ matrix.os }} ${{ matrix.cibw_archs }} ${{ matrix.cibw_build }}"
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        cibw_build: ["cp310-*", "cp311-*", "cp312-*"]
        cibw_archs: ["x86_64", "i686"] # "aarch64" and "ppc64le" not working, investigate if needed

    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up QEMU
        if: matrix.cibw_archs != 'x86_64'
        uses: docker/setup-qemu-action@v2
        with:
          platforms: all

      - name: Set up python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install poetry
        run: pipx install poetry

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.16.5
        env:
          CIBW_ARCHS: ${{ matrix.cibw_archs }}
          CIBW_BUILD: ${{ matrix.cibw_build }}

      - uses: actions/upload-artifact@v4
        with:
          name: cibw-wheels-${{ matrix.os }}-${{ matrix.cibw_archs }}-${{ strategy.job-index }}
          path: wheelhouse/*.whl

  build_wheels_macos:
    name: "${{ matrix.os }} ${{ matrix.cibw_archs }} ${{ matrix.cibw_build }}"
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest]
        cibw_build: ["cp310-*", "cp311-*", "cp312-*"]
        cibw_archs: ["x86_64"]
    env:
      SYSTEM_VERSION_COMPAT: 0 # https://github.com/actions/setup-python/issues/469#issuecomment-1192522949
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install poetry
        run: pipx install poetry

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.16.5
        env:
          CIBW_ARCHS: ${{ matrix.cibw_archs }}
          CIBW_BUILD: ${{ matrix.cibw_build }}

      - uses: actions/upload-artifact@v4
        with:
          name: cibw-wheels-${{ matrix.os }}-${{ matrix.cibw_archs }}-${{ strategy.job-index }}
          path: wheelhouse/*.whl

  build_wheels_macos_arm64:
    name: "${{ matrix.os }} ${{ matrix.cibw_archs }} ${{ matrix.cibw_build }}"
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest]
        cibw_build: ["cp310-*", "cp311-*", "cp312-*"]
        cibw_archs: ["arm64"]

    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install poetry
        run: pipx install poetry

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.16.5
        env:
          CIBW_BUILD: ${{ matrix.cibw_build }}
          CIBW_ARCHS: ${{ matrix.cibw_archs }}
          CIBW_TEST_SKIP: "*-macosx_arm64"
          CIBW_REPAIR_WHEEL_COMMAND: |
            echo "Target delocate archs: {delocate_archs}"

            ORIGINAL_WHEEL={wheel}

            echo "Running delocate-listdeps to list linked original wheel dependencies"
            delocate-listdeps --all $ORIGINAL_WHEEL

            echo "Renaming .whl file when architecture is 'macosx_arm64'"
            RENAMED_WHEEL=${ORIGINAL_WHEEL//x86_64/arm64}

            echo "Wheel will be renamed to $RENAMED_WHEEL"
            mv $ORIGINAL_WHEEL $RENAMED_WHEEL

            echo "Running delocate-wheel command on $RENAMED_WHEEL"
            delocate-wheel --require-archs {delocate_archs} -w {dest_dir} -v $RENAMED_WHEEL

            echo "Running delocate-listdeps to list linked wheel dependencies"
            WHEEL_SIMPLE_FILENAME="${RENAMED_WHEEL##*/}"
            delocate-listdeps --all {dest_dir}/$WHEEL_SIMPLE_FILENAME

            echo "DONE."

      - uses: actions/upload-artifact@v4
        with:
          name: cibw-wheels-${{ matrix.os }}-${{ matrix.cibw_archs }}-${{ strategy.job-index }}
          path: ./wheelhouse/*.whl
